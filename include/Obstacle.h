//----------------------------------------------------------------------------------------------------------------------
/// @file Obstacle.h
/// @author Alexander la Tourelle
/// @date 22/03/15
/// @class Obstacle
/// @brief A class to contain all relevant data and methods for an obstacle in
/// a flocking system. The class contains data such as position, radius and colour
/// as well as some simple accessor methods
//----------------------------------------------------------------------------------------------------------------------
#ifndef OBSTACLE_H
#define OBSTACLE_H

#include <ngl/Vec3.h>

class Obstacle
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor
  /// @param [in] _radius the radius of the obstacle
  /// @param [in] _position the position of the obstacle
  //----------------------------------------------------------------------------------------------------------------------
  Obstacle(float _radius, ngl::Vec3 _position);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~Obstacle();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief accessor method to get the obstacle's position
  /// @return returns m_position
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 getPosition(){return m_position;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief accessor method to get the obstacle's radius
  /// @return returns m_radius
  //----------------------------------------------------------------------------------------------------------------------
  float getRadius(){return m_radius;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief accessor method to get the obstacle's colour
  /// @return returns m_colour
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 getColour(){return m_colour;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to set the obstacle's colour
  /// @param [in] _colour the RGB colour values to be set
  //----------------------------------------------------------------------------------------------------------------------
  void setColour(ngl::Vec3 _colour){m_colour = _colour;}

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the bounding radius of the obstacle
  //----------------------------------------------------------------------------------------------------------------------
  float m_radius;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the position of the oobstacle
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_position;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the obstacles colour
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_colour;

};

#endif // OBSTACLE_H
